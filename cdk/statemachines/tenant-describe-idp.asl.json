{
  "Comment": "TenantDescribeIdpService",
  "StartAt": "GetParams",
  "States": {
    "GetParams": {
      "Type": "Task",
      "Next": "IsInputValid?",
      "Parameters": {
        "Name": "/saas-auth-demo/params"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.Params",
      "ResultSelector": {
        "Data.$": "States.StringToJson($.Parameter.Value)"
      }
    },
    "InvalidRequestError": {
      "Type": "Fail",
      "Error": "InvalidRequestError",
      "Cause": "invalid request parameters"
    },
    "TenantNotFoundError": {
      "Type": "Fail",
      "Error": "TenantNotFoundError",
      "Cause": "given tenantId not found"
    },
    "IsInputValid?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.tenantId",
              "IsPresent": true
            },
            {
              "Variable": "$.tenantId",
              "IsString": true
            }
          ],
          "Comment": "Yes",
          "Next": "GetTenantAuthconfig"
        }
      ],
      "Default": "InvalidRequestError"
    },
    "GetTenantAuthconfig": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName.$": "$.Params.Data.DDBTable",
        "Key": {
          "pk.$": "States.Format('tenant#{}', $.tenantId)",
          "sk.$": "States.Format('authconfig')"
        }
      },
      "Next": "TenantExists?",
      "ResultPath": "$.GetTenantAuthConfigResult"
    },
    "TenantExists?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.GetTenantAuthConfigResult.Item",
          "IsPresent": true,
          "Next": "IdentityProviderSettingExists?",
          "Comment": "Yes"
        }
      ],
      "Default": "TenantNotFoundError"
    },
    "IdentityProviderSettingExists?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.GetTenantAuthConfigResult.Item.federationEnabled.BOOL",
              "IsPresent": true
            },
            {
              "Variable": "$.GetTenantAuthConfigResult.Item.federationEnabled.BOOL",
              "IsBoolean": true
            },
            {
              "Variable": "$.GetTenantAuthConfigResult.Item.federationEnabled.BOOL",
              "BooleanEquals": true
            }
          ],
          "Comment": "Yes",
          "Next": "ParseUserPoolSetting"
        }
      ],
      "Default": "SettingNotExistsError"
    },
    "SettingNotExistsError": {
      "Type": "Fail",
      "Error": "SettingNotExistsError",
      "Cause": "Identity provider settings does not exist"
    },
    "ParseUserPoolSetting": {
      "Type": "Pass",
      "Next": "DescribeIdentityProvider",
      "ResultPath": "$.UserPool",
      "Parameters": {
        "UserPoolId.$": "$.GetTenantAuthConfigResult.Item.userPoolId.S",
        "AppClinetId.$": "$.GetTenantAuthConfigResult.Item.appClientId.S",
        "ProviderName.$": "States.Format('external-idp-{}', $.tenantId)"
      }
    },
    "DescribeIdentityProvider": {
      "Type": "Task",
      "Parameters": {
        "ProviderName.$": "$.UserPool.ProviderName",
        "UserPoolId.$": "$.UserPool.UserPoolId"
      },
      "Resource": "arn:aws:states:::aws-sdk:cognitoidentityprovider:describeIdentityProvider",
      "Next": "Success",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Comment": "Rollback",
          "ResultPath": "$.error",
          "Next": "InternalServerError"
        }
      ],
      "ResultPath": "$.DescribeIdentityProviderResult"
    },
    "Success": {
      "Type": "Pass",
      "Parameters": {
        "tenantId.$": "$.tenantId",
        "providerType.$": "$.DescribeIdentityProviderResult.IdentityProvider.ProviderType",
        "providerDetails.$": "$.DescribeIdentityProviderResult.IdentityProvider.ProviderDetails",
        "emailMappingAttribute.$": "$.DescribeIdentityProviderResult.IdentityProvider.AttributeMapping['custom:emailFromIdp']"
      },
      "End": true
    },
    "InternalServerError": {
      "Type": "Fail",
      "Error": "InternalServerError",
      "Cause": "server side error"
    }
  }
}